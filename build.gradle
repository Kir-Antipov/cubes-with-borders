plugins {
    id "fabric-loom" version "0.7-SNAPSHOT"
    id "org.ajoberstar.grgit" version "4.1.1"
}

sourceCompatibility = JavaVersion.toVersion(project.java_version)
targetCompatibility = sourceCompatibility

Integer javaVersion = targetCompatibility.ordinal() + 1
String minecraftDependencyVersion = project.minecraft_version.split(/[+ -]/)[0]
String loaderVersion = project.loader_version;

group = project.maven_group
archivesBaseName = project.archives_base_name
version = "${project.mod_version}${getVersionMetadata()}" as Object

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
}

processResources {
    filesMatching(["fabric.mod.json", "*.mixins.json"]) {
        expand([
            "version": version,
            "loader": loaderVersion,
            "minecraft": minecraftDependencyVersion,
            "java": javaVersion,
        ])
    }
}

tasks.withType(JavaCompile).configureEach {
    // Ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly.
    // If Javadoc is generated, this must be specified in that task too.
    // See http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    it.options.encoding = "UTF-8"
}

java {
    withSourcesJar()
}

jar {
    from "LICENSE.md"
}

@SuppressWarnings("GrMethodMayBeStatic") // It cannot
String getVersionMetadata() {
    String mcVersion = "+${project.minecraft_version}"

    // Release builds don't require additional metadata
    String ref = System.getenv("GITHUB_REF")
    if (ref != null && ref.startsWith("refs/tags/")) {
        return mcVersion
    }

    // GitHub CI builds only
    String build_id = System.getenv("GITHUB_RUN_NUMBER")
    if (build_id != null && build_id.length() != 0) {
        return "${mcVersion}+build.${build_id}"
    }

    if (grgit != null && grgit.head() != null) {
        def id = grgit.head().abbreviatedId

        // Flag the build if the build tree is not clean
        if (!grgit.status().clean) {
            id += "-dirty"
        }

        return "${mcVersion}+rev.${id}"
    }

    // No tracking information could be found about the build
    return "${mcVersion}+unknown"
}
